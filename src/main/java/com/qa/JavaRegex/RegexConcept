Java Regex
The Java Regex or Regular Expression is an API to define a pattern for searching or manipulating strings.

It is widely used to define the constraint on strings such as password and email validation.
After learning Java regex tutorial, you will be able to test your regular expressions by the Java Regex Tester Tool.

Java Regex API provides 1 interface and 3 classes in java.util.regex package


java.util.regex package
     The Matcher and Pattern classes provide the facility of Java regular expression. The java.util.regex package
    provides following classes and interfaces for regular expressions.

   MatchResult interface
   Matcher class
   Pattern class
   PatternSyntaxException class

 Matcher class
 It implements the MatchResult interface. It is a regex engine which is used to perform match operations on a character sequence.

 No.	Method	              Description
 1	boolean matches()	        test whether the regular expression matches the pattern.
 2	boolean find()	            finds the next expression that matches the pattern.
 3	boolean find(int start) 	finds the next expression that matches the pattern from the given start number.
 4	String group()	            returns the matched subsequence.
 5	int start()	                returns the starting index of the matched subsequence.
 6	int end()	                returns the ending index of the matched subsequence.
 7	int groupCount()	        returns the total number of the matched subsequence.


 Pattern class
 It is the compiled version of a regular expression. It is used to define a pattern for the regex engine.

 No.	Method	                             Description
 1	static Pattern compile(String regex)	compiles the given regex and returns the instance of the Pattern.
 2	Matcher matcher(CharSequence input)	    creates a matcher that matches the given input with the pattern.
 3	static boolean matches(String regex, CharSequence input)	It works as the combination of compile and matcher methods. It compiles the regular expression and matches the given input with the pattern.
 4	String[] split(CharSequence input)	    splits the given input string around matches of given pattern.
 5	String pattern()	                    returns the regex pattern.

 Regex Character classes

 No. Character  Class	Description
 1	 [abc]	        a, b, or c (simple class)
 2	 [^abc]	        Any character except a, b, or c (negation)
 3	 [a-zA-Z]	    a through z or A through Z, inclusive (range)
 4	 [a-d[m-p]]	    a through d, or m through p: [a-dm-p] (union)
 5	 [a-z&&[def]]	d, e, or f (intersection)
 6	 [a-z&&[^bc]]	a through z, except for b and c: [ad-z] (subtraction)
 7	 [a-z&&[^m-p]]	a through z, and not m through p: [a-lq-z](subtraction)